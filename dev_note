/* Notes for dev */

as of new phone (android 6.x +, M == Marshmallow, SDK 23) need to reevalutate how to check for beacon SDks.

It seems that the current methods only are useful if an application asks for 
permissions as per its manifest at install, then we can check these.

Signal360 app New & Now has the sdk inside it (SignalService.java etc) yet doesn't ask for audio permission...
is New&Now ouputting audio beacons instead of listening for them - lots of AudioALSA logs...
problem also is that SignalService has BT as well as Audio in its methods...

map the audio tones received (18kHz +) to letters for a sort of char code/decode
regardless of whether it is the actual code used by vendor.
need to change ProcessAudio to not be specific for CFP_Ultra sequencing

recordTask.magnitudeScan() steps thru freqs from min to max via freq_stepper value,
if find a candidate then maybe set up to record range of freqs centered on candidate 
for later analysis? ie tone found at 18750, record and search in 18500~19000 ?


patents for sig360, audio as modulated 1s and modulated 0s, transmit code to server, 
receive content from server.
20550~21000 for logic 0
21000~22000 for logic 1

pulse of 1ms, for 32 ms duration == 32 bits
clock pulse (carrier-like) between logic 0 and logic 1 frequency serves as centre freq and start bit

application may wake up OS to listen for modulated code...
can also listen for specific SSIDs of WiFi, to wake up os and listen for mod codes.

example freq range may be increment of 100hz
check for peaks that occuring within 100 hz of each other, ie 20500 has 30 peaks and 20400 has 8 peaks,
this means likely a proper pair of mod codes, as opposed to 20500 and say 20750.. (250hz diff)
"may" set lower freq peaks to logic 0 and higher freq peaks to logic 1 (20400 == 0, 20500 == 1)
preamble, payload and checksum
(use a PIC 10 F200 8 bit micro controller for badges to receive)

RecordTask.magnitudeScan() needs to be better at picking useful freqs...
any freq captured below the candidate and within 100Hz gets included with it?
20025, 20050, 20075 all == 20100?

debug ie:
11-22 16:06:00.267: D/PilferShush(11662): Freq: 20000 : 16
11-22 16:06:00.267: D/PilferShush(11662): Freq: 19975 : 14
11-22 16:06:00.268: D/PilferShush(11662): Freq: 20075 : 9
11-22 16:06:00.269: D/PilferShush(11662): Freq: 20100 : 7
11-22 16:06:00.269: D/PilferShush(11662): Freq: 20025 : 7
11-22 16:06:00.270: D/PilferShush(11662): Freq: 20125 : 7
11-22 16:06:00.270: D/PilferShush(11662): Freq: 20050 : 5



running straight test from audacity 20kHz tone:
roughly 3 sec test:
got 71 hits at 20000

== 1 sec gets 23.6667 hits
== 1 hit (1 loop) every 42 ms <-- don't think is accurate at all :)

RecordTask that steps through frequencies is wrong algorithm for this.
we need a 32ms ability.
find a short burst tone (32ms) and then analyse it.

loop-6sec-10x50msMods got 20.0 == 8, 20.1 == 4
sample has 5 x 20.0 and 5 x 20.1

THIS ####
if the record task finds a single 20.~ kHz peak, it should record it and then look inside to see if its a mod signal.
idea is that a 32 bit 32ms signal will look like a single hit to current recordTask.
if we can't do-mod the signal then maybe we can look for regular repeated transmissions as a sign of intel?
THIS ####

unless magnitudeScan "happens" to be looking for the correct freq at the time, it will miss the 32ms beep...
or, maybe the beacon has repeated signals..
IF we know the scan rate loop time then we would make the beacons emit a signal at a rate that would be picked up.

can run a repeated (10x) 50ms tone with separations and can capture 8 of them.

run on 6sec with 10x 50ms binary mods (1ms per 20.0 and 20.1 x 10) got 8 captures.
run on 30ms binMods x 10 with 30ms gap got 16 captures at 20050.


LISNR
18.7-19.2 kHz
detect time: 0.6 - 3 sec
start bit, record 10 secs or so using hpf, then look for payload within:
mic->(Lpf)filter->(10sec)buffer->decode/demod

has:
hexArray = "0123456789abcdef".toCharArray(); for hashedPayload
lisnr as of API 5 now uses phone to broadcast as well...



